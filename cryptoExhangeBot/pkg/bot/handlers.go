package bot

import (
	"fmt"
	"math/rand"
	"strconv"
	"strings"

	"cryptoChange/pkg/state"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleStart –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ø—á—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func handleStart(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É: –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10
	a := rand.Intn(10) + 1
	b := rand.Intn(10) + 1
	captchaAnswer := a + b

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState := &state.UserState{
		Step:          state.StepCaptcha,
		CaptchaAnswer: captchaAnswer,
		ChatID:        chatID,
	}
	state.SetState(message.From.ID, userState)

	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç! üòä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ-–æ–±–º–µ–Ω–Ω–∏–∫ üöÄ\n\nüî¢ –†–µ—à–∏—Ç–µ –∫–∞–ø—á—É: %d + %d = ?", a, b)
	markup := DefaultInlineKeyboard()
	EditOrSendMessage(bot, chatID, userState, text, markup)
}

// handleState –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
func handleState(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	userState := state.GetState(message.From.ID)
	switch userState.Step {
	case state.StepCaptcha:
		handleCaptcha(bot, message, userState)
	case state.StepCoinChoice:
		// –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –≤—ã–±–∏—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É —á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫–∏,
		// –Ω–æ –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ fallback.
		handleCoinChoice(bot, message, userState)
	case state.StepAmount:
		handleAmount(bot, message, userState)
	case state.StepWallet:
		handleWallet(bot, message, userState)
	default:
		text := "‚ùóÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
		EditOrSendMessage(bot, userState.ChatID, userState, text, DefaultInlineKeyboard())
		state.DeleteState(message.From.ID)
	}
}

func handleCaptcha(bot *tgbotapi.BotAPI, message *tgbotapi.Message, userState *state.UserState) {
	chatID := message.Chat.ID
	answer, err := strconv.Atoi(strings.TrimSpace(message.Text))
	if err != nil {
		text := "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
		EditOrSendMessage(bot, chatID, userState, text, DefaultInlineKeyboard())
		return
	}

	if answer != userState.CaptchaAnswer {
		text := "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
		EditOrSendMessage(bot, chatID, userState, text, DefaultInlineKeyboard())
		return
	}

	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
	userState.Step = state.StepCoinChoice
	text := "‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: (BTC, ETH, LTC) üí∞"
	markup := CoinSelectionKeyboard()
	EditOrSendMessage(bot, chatID, userState, text, markup)
}

func handleCoinChoice(bot *tgbotapi.BotAPI, message *tgbotapi.Message, userState *state.UserState) {
	chatID := message.Chat.ID
	coin := strings.ToUpper(strings.TrimSpace(message.Text))
	if coin != "BTC" && coin != "ETH" && coin != "LTC" {
		text := "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π: BTC, ETH, LTC"
		EditOrSendMessage(bot, chatID, userState, text, CoinSelectionKeyboard())
		return
	}
	userState.Coin = coin
	userState.Step = state.StepAmount
	text := "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:"
	EditOrSendMessage(bot, chatID, userState, text, DefaultInlineKeyboard())
}

func handleAmount(bot *tgbotapi.BotAPI, message *tgbotapi.Message, userState *state.UserState) {
	chatID := message.Chat.ID
	amountStr := strings.TrimSpace(message.Text)
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil || amount <= 0 {
		text := "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã."
		EditOrSendMessage(bot, chatID, userState, text, DefaultInlineKeyboard())
		return
	}
	userState.PaymentAmount = amount
	userState.Step = state.StepWallet
	text := "üíµ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã:"
	EditOrSendMessage(bot, chatID, userState, text, DefaultInlineKeyboard())
}

func handleWallet(bot *tgbotapi.BotAPI, message *tgbotapi.Message, userState *state.UserState) {
	chatID := message.Chat.ID
	walletAddress := strings.TrimSpace(message.Text)
	userState.Wallet = walletAddress
	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	userState.Step = state.StepConfirmation
	text := fmt.Sprintf("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n\nüí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: %s\nüíµ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: %.2f —Ä—É–±\nüì• –ö–æ—à–µ–ª—ë–∫: %s\n\n–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?",
		userState.Coin, userState.PaymentAmount, userState.Wallet)
	markup := ConfirmationKeyboard()
	EditOrSendMessage(bot, chatID, userState, text, markup)
}
