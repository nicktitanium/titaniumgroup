package bot

import (
	"fmt"
	"log"
	"strings"

	"cryptoChange/pkg/database"
	"cryptoChange/pkg/microservice"
	"cryptoChange/pkg/model"
	"cryptoChange/pkg/state"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ callback‚Äë–∑–∞–ø—Ä–æ—Å—ã
func HandleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	data := callback.Data
	userID := callback.From.ID
	userState := state.GetState(userID)
	chatID := callback.Message.Chat.ID

	switch {
	case strings.HasPrefix(data, "coin:"):
		// –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫–∏
		coin := strings.TrimPrefix(data, "coin:")
		if coin != "BTC" && coin != "ETH" && coin != "LTC" {
			return
		}
		userState.Coin = coin
		userState.Step = state.StepAmount
		text := "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:"
		markup := DefaultInlineKeyboard()
		EditOrSendMessage(bot, chatID, userState, text, markup)
		answerCallback(bot, callback, fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏ %s", coin))
	case data == "confirm_order":
		processConfirmation(bot, callback, userState)
	case data == "main_menu":
		// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		state.DeleteState(userID)
		text := "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."
		editConfig := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID, text)
		bot.Send(editConfig)
		answerCallback(bot, callback, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	}
}

func answerCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery, text string) {
	cfg := tgbotapi.NewCallback(callback.ID, text)
	bot.Request(cfg)
}

func processConfirmation(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery, userState *state.UserState) {
	chatID := callback.Message.Chat.ID
	// –ü–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É
	paymentDetail, err := microservice.GetPaymentDetail("http://your-microservice-url/api/get_payment_detail")
	if err != nil {
		paymentDetail = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ‚ùå"
	}
	username := callback.From.UserName
	if username == "" {
		username = strings.TrimSpace(callback.From.FirstName + " " + callback.From.LastName)
	}
	order := &model.Order{
		Username:      username,
		Coin:          userState.Coin,
		PaymentAmount: userState.PaymentAmount,
		WalletAddress: userState.Wallet,
		PaymentDetail: paymentDetail,
	}
	if err = database.InsertOrder(order); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: %v", err)
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		EditOrSendMessage(bot, chatID, userState, text, DefaultInlineKeyboard())
		state.DeleteState(callback.From.ID)
		answerCallback(bot, callback, "–û—à–∏–±–∫–∞")
		return
	}
	text := fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nüí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: %s\nüíµ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: %.2f —Ä—É–±\nüì• –ö–æ—à–µ–ª—ë–∫: %s\nüîë –†–µ–∫–≤–∏–∑–∏—Ç: %s",
		order.Coin, order.PaymentAmount, order.WalletAddress, order.PaymentDetail)
	markup := DefaultInlineKeyboard()
	EditOrSendMessage(bot, chatID, userState, text, markup)
	state.DeleteState(callback.From.ID)
	answerCallback(bot, callback, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
}
