package bot

import (
	"cryptoChange/pkg/state"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// EditOrSendMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ,
// –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç MessageID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func EditOrSendMessage(bot *tgbotapi.BotAPI, chatID int64, userState *state.UserState, text string, markup tgbotapi.InlineKeyboardMarkup) (int, error) {
	// –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è ID —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
	if userState.LastMessageID != 0 {
		editConfig := tgbotapi.NewEditMessageText(chatID, userState.LastMessageID, text)
		editConfig.ReplyMarkup = &markup
		_, err := bot.Send(editConfig)
		if err == nil {
			return userState.LastMessageID, nil
		}
	}
	// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â—ë –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = markup
	sentMsg, err := bot.Send(msg)
	if err != nil {
		return 0, err
	}
	userState.LastMessageID = sentMsg.MessageID
	return sentMsg.MessageID, nil
}

// MainMenuKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
func MainMenuKeyboard() tgbotapi.InlineKeyboardMarkup {
	btn := tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	row := tgbotapi.NewInlineKeyboardRow(btn)
	return tgbotapi.NewInlineKeyboardMarkup(row)
}

// CoinSelectionKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–ª—é—Å –∫–Ω–æ–ø–∫—É ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
func CoinSelectionKeyboard() tgbotapi.InlineKeyboardMarkup {
	btnBTC := tgbotapi.NewInlineKeyboardButtonData("BTC", "coin:BTC")
	btnETH := tgbotapi.NewInlineKeyboardButtonData("ETH", "coin:ETH")
	btnLTC := tgbotapi.NewInlineKeyboardButtonData("LTC", "coin:LTC")
	mainMenu := tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	row1 := tgbotapi.NewInlineKeyboardRow(btnBTC, btnETH, btnLTC)
	row2 := tgbotapi.NewInlineKeyboardRow(mainMenu)
	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)
}

// ConfirmationKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: ¬´‚úÖ –í—Å—ë –æ–∫¬ª –∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
func ConfirmationKeyboard() tgbotapi.InlineKeyboardMarkup {
	btnConfirm := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—Å—ë –æ–∫", "confirm_order")
	mainMenu := tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
	row := tgbotapi.NewInlineKeyboardRow(btnConfirm, mainMenu)
	return tgbotapi.NewInlineKeyboardMarkup(row)
}

// DefaultInlineKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
func DefaultInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	return MainMenuKeyboard()
}
